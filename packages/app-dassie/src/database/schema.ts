import { type DatabaseSchema } from "@dassie/lib-sqlite"

import { accountsTable } from "../accounting/database-tables/accounts"
import { ACME_DATABASE_SCALARS } from "../acme-certificate-manager/schemas/database-scalars"
import { acmeTokensTable } from "../acme-certificate-manager/tables/acme-tokens"
import { btpTokensTable } from "../api-keys/database-tables/btp-tokens"
import { sessionsTable } from "../authentication/database-tables/sessions"
import { CONFIG_DATABASE_SCALARS } from "../config/schemas/database-scalars"
import { settlementSchemesTable } from "../ledgers/database-tables/settlement-schemes"
import { incomingPaymentTable } from "../open-payments/tables/incoming-payment"
import { outgoingPaymentTable } from "../open-payments/tables/outgoing-payment"
import { nodesTable } from "../peer-protocol/tables/nodes"
import { peersTable } from "../peer-protocol/tables/peers"
import migrations from "./migrations"

/**
 * Unique application ID for identifying the SQLite database as belonging to Dassie.
 *
 * This constant application ID was generated by first generating a random, positive, signed, 32-bit integer
 * and replacing the second through fourth nibbles with the HEX digits "DA5" to represent Dassie.
 */
const DASSIE_SQLITE_APPLICATION_ID = 0x1d_a5_3b_81

export const DASSIE_DATABASE_SCHEMA = {
  applicationId: DASSIE_SQLITE_APPLICATION_ID,
  migrations,
  tables: {
    accounts: accountsTable,
    incomingPayment: incomingPaymentTable,
    outgoingPayment: outgoingPaymentTable,
    settlementSchemes: settlementSchemesTable,
    nodes: nodesTable,
    peers: peersTable,
    acmeTokens: acmeTokensTable,
    sessions: sessionsTable,
    btpTokens: btpTokensTable,
  },
  scalars: {
    ...CONFIG_DATABASE_SCALARS,
    ...ACME_DATABASE_SCALARS,
  },
} as const satisfies DatabaseSchema

export type DatabaseTableId = keyof (typeof DASSIE_DATABASE_SCHEMA)["tables"]

export const DATABASE_TABLE_IDS = Object.keys(
  DASSIE_DATABASE_SCHEMA.tables,
) as DatabaseTableId[]

export type DatabaseTableName =
  (typeof DASSIE_DATABASE_SCHEMA)["tables"][DatabaseTableId]["name"]

export const DATABASE_TABLE_NAMES = Object.values(
  DASSIE_DATABASE_SCHEMA.tables,
).map((table) => table.name)
